"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.2.25.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
import json
import logging.handlers
import traceback
from pathlib import Path
from .middleware import get_current_request, get_current_response

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

SECRET_KEY = os.getenv("SECRET_KEY")
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition
SYSTEM_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'elasticapm.contrib.django',
]

LOCAL_APPS = [
    "core",
    "errors",
    "todo",
]

INSTALLED_APPS = SYSTEM_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    'elasticapm.contrib.django.middleware.TracingMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'config.middleware.ThreadLocalRequestMiddleware',
]

ROOT_URLCONF = 'config.urls'

ELASTIC_APM = {
    "SERVICE_NAME": "DjangoTestApp",  # Kibana에서 식별할 서비스 이름
    "SECRET_TOKEN": "mysecret",  # APM Server와 동일한 secret_token 사용
    "SERVER_URL": "http://apm-server:8200",  # APM 서버 주소
    "ENVIRONMENT": "development",  # 개발/운영 환경 설정
    "CAPTURE_BODY": "all",  # 요청 본문 캡처 (all, errors, off)
    "TRANSACTIONS_IGNORE_PATTERNS": ["^OPTIONS "],  # 특정 패턴 제외 가능
    "DJANGO_TRANSACTION_NAME_FROM_ROUTE": True,  # 라우트 기반 트랜잭션 이름 설정
    "DEBUG": True,  # 디버깅 활성화
    "PROFILING_ENABLED": True,  # 프로파일링 활성화
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': os.environ.get('DB_HOST'),
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASS'),

    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


class JSONFormatter(logging.Formatter):
    def format(self, record):
        log_record = {
            "time": self.formatTime(record, "%Y-%m-%dT%H:%M:%S"),
            "level": record.levelname,
            "module": record.module,
            "message": record.getMessage(),
            "name": record.name,
            "pathname": record.pathname,
            "filename": record.filename,
            "funcName": record.funcName,
            "lineno": record.lineno,
            "process": record.process,
            "thread": record.thread,
            "threadName": record.threadName,
        }

        # 예외 발생 시 스택 트레이스 추가
        if record.exc_info:
            log_record["exception"] = traceback.format_exc()

        # 요청 정보 추가 (RequestFilter가 설정된 경우)
        if hasattr(record, "method"):
            log_record["method"] = record.method
        if hasattr(record, "path"):
            log_record["path"] = record.path
        if hasattr(record, "status_code"):
            log_record["status_code"] = record.status_code
        if hasattr(record, "remote_addr"):
            log_record["remote_addr"] = record.remote_addr
        if hasattr(record, "user"):
            log_record["user"] = record.user
        if hasattr(record, "user_agent"):
            log_record["user_agent"] = record.user_agent

        return json.dumps(log_record, ensure_ascii=False)


class RequestFilter(logging.Filter):
    """Django 요청 정보를 로그에 추가하는 필터"""

    def filter(self, record):
        request = get_current_request()
        response = get_current_response()
        if request:
            record.method = request.method  # HTTP 메서드
            record.path = request.get_full_path()  # 요청 경로
            record.remote_addr = request.META.get("REMOTE_ADDR", "")  # 클라이언트 IP
            record.user = request.user.username if request.user.is_authenticated else "Anonymous"
            record.user_agent = request.META.get("HTTP_USER_AGENT", "")  # 브라우저 정보

        if response:
            record.status_code = response.status_code
        return True


class JSONSocketHandler(logging.handlers.SocketHandler):
    """JSON을 TCP로 전송하도록 설정 (Pickle 사용 금지)"""

    def makePickle(self, record):
        return (self.format(record) + "\n").encode("utf-8")


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'json': {
            '()': JSONFormatter,
        },
    },
    'filters': {
        'request_filter': {
            '()': RequestFilter,
        },
    },
    'handlers': {
        'tcp': {  # Logstash로 로그 전송 (TCP)
            'level': 'INFO',
            'class': 'config.settings.JSONSocketHandler',
            'host': 'logstash',
            'port': 5044,
            'formatter': 'json',
            'filters': ['request_filter'],
        },
    },
    'loggers': {
        'django': {
            'handlers': ['tcp'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}
